The following code is code for Microsoft Visual Studio 2017. 
It is reading selected items of the JMdict_e.txt file into C# programming language objects.

The code uses the JMdict_e.txt source file under Creative Commons Licence: creativecommons.org/licenses/by-sa/3.0/legalcode.

"This package uses the EDICT and KANJIDIC dictionary files. "+
                "\nThese files are the property of the Electronic Dictionary Research and Development Group, "+
                "\nand are used in conformance with the Group's licence. "+
                "\nSee www.edrdg.org/jmdict/edict.html and www.edrdg.org/edrdg/licence.html";

DictionaryEntryObject.cs ------------------------------

Additionally, there are 3 C#files:
DictionaryEntryObject.cs, 
MainWindow.xaml.cs and
MainWindow.xaml.

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Serialization;



namespace UmwandlungDatensatzobjekt
{
    public class DictionaryEntryObject
    {
        /*The dictionary files are made available under a Creative Commons Attribution-ShareAlike Licence (V3.0).
         * Creative Commons Licence: creativecommons.org/licenses/by-sa/3.0/legalcode
         * 
         "This package uses the EDICT and KANJIDIC dictionary files. "+
                "\nThese files are the property of the Electronic Dictionary Research and Development Group, "+
                "\nand are used in conformance with the Group's licence. "+
                "\nSee www.edrdg.org/jmdict/edict.html and www.edrdg.org/edrdg/licence.html";
             */

        //The JMdict_e.txt Dictionary File can be downloaded at: www.edrdg.org/jmdict/edict_doc.html
        //The file contains the dictionary entries and XML Tags, among others.
        //Downloadlink: ftp.monash.edu/pub/nihongo/JMdict_e.gz
        //To decompress use for example: www.7-zip.de
        //File JMdict_e.txt (decompressed) needs to be placed into the same directory as the .exe file of this program (/bin/Debug).

        //There are some <keb> contents in JMdict_e_txt, which have more than one entry, eg. "此方".
        //Consequently, there can be more than one result when searching for a specific kanji i.e. <keb> entry.
        //Sometimes, there is more than one entry assigned with the same XML-Tag, 
        //eg one or three contents in one entry that are assigned by <gloss>.

        //For the production of C Sharp Objects that all have the same amount of properties,
        //I summarised contents that are in the same entry and have the same tag
        //into one property, separated the values by semicolons;


        public string strEnt_seq, strKeb, strReb, strGloss;

        /// <summary>
        /// constructor
        /// </summary>
        /// <param name="E">ent_seq</param>
        /// <param name="K">keb</param>
        /// <param name="R">reb</param>
        /// <param name="G">gloss</param>
        public DictionaryEntryObject(string E, string K, string R, string G)
        {
            strEnt_seq = E;
            strKeb = K;
            strReb = R;
            strGloss = G;
        }

        /// <summary>
        /// Reads JMdict_e.txt dictionary file, that I placed into the bin/debug directory.
        /// Produces a list of objects which each contains selected information of the ent_seq, keb, reb and gloss tags of one entry in JMdict_e.txt
        /// If there are more than one gloss contents in one entry, they get combined into one piece separated by semicolons;
        /// The XML-Tags get removed.
        /// </summary>
        /// <returns>List of Objects, one from each entry in JMdict_e.txt</returns>
        public static List<DictionaryEntryObject> ErstelleBefuellteDatensatzListe()
        {
            string jmdictfile = "JMdict_e.txt"; //Dictionary Sourcefile from  www.edrdg.org/jmdict/edict.html

            List<DictionaryEntryObject> liste1 = new List<DictionaryEntryObject>();

            string strE = "";
            string strK = "";
            string strR = "";
            string strG = "";

            FileStream file = new FileStream(jmdictfile, FileMode.Open, FileAccess.Read);
            StreamReader streamReader = new StreamReader(file);

            string line = "Test";
            while (!streamReader.EndOfStream)
            {
                line = streamReader.ReadLine();
                if (line.Contains("<ent_seq>"))
                {
                    line = line.Replace("<ent_seq>", "");
                    line = line.Replace("</ent_seq>", "");
                    line = line + "; ";

                    strE += line;
                }
                if (line.Contains("<keb>"))
                {
                    line = line.Replace("<keb>", "");
                    line = line.Replace("</keb>", "");
                    line = line + "; ";

                    strK += line;
                }
                if (line.Contains("<reb>"))
                {
                    line = line.Replace("<reb>", "");
                    line = line.Replace("</reb>", "");
                    line = line + "; ";

                    strR += line;
                }
                if (line.Contains("<gloss>"))
                {
                    line = line.Replace("<gloss>", "");
                    line = line.Replace("</gloss>", "");
                    line = line + "; ";

                    strG += line;
                }


                if (line.Contains("</entry>"))
                {
                    //Console.WriteLine("Stringwerte: strE: " + strE +", strK: "+ strK+", strR: " + strR+", strG: " + strG);
                    liste1.Add(new DictionaryEntryObject(strE, strK, strR, strG));
                    strE = "";
                    strK = "";
                    strR = "";
                    strG = "";
                }


            }
            streamReader.Close();
            return liste1;
        }

        /// <summary>
        /// Searches for the translation of a particular keyword
        /// </summary>
        /// <param name="liste2">Contains the list of entry-objects</param>
        /// <param name="gesWort">Word in chinese characters, for which translation is looked for</param>
        /// <returns>List of found objects that contain the targeted chinese character</returns>
        public static List<DictionaryEntryObject> SucheUebersetzung(List<DictionaryEntryObject> liste2, string gesWort)
        {
            List<DictionaryEntryObject> ergebnis = new List<DictionaryEntryObject>();

            var exprSucheKanji = from a in liste2
                                 where a.strKeb.Contains(gesWort)
                                 select a;

            foreach (var item in exprSucheKanji)
            {
                ergebnis.Add(item);
            }

           return ergebnis;

        }

    }
}

End DictionaryEntryObject.cs ------------------------------

MainWindow.xaml.cs ------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Data.OleDb;
using System.Data;

namespace UmwandlungDatensatzobjekt
{
    /// <summary>
    /// Interaktionslogik für MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        
        public MainWindow()
        {
            InitializeComponent();

            lblAcknowledgement.Content = "This package uses the EDICT and KANJIDIC dictionary files. "+
                "\nThese files are the property of the Electronic Dictionary Research and Development Group, "+
                "\nand are used in conformance with the Group's licence. "+
                "\nSee www.edrdg.org/jmdict/edict.html and www.edrdg.org/edrdg/licence.html";

            string gesWort = "取り掛か"; //Word for which the translation is looked for
            lblKey.Content = gesWort;

           List<DictionaryEntryObject> liste2; //List of selected vocabulary data for each entry

           //try to load sourcefile

            try
            {
                liste2 = DictionaryEntryObject.ErstelleBefuellteDatensatzListe();
                
            }
            catch (Exception)
            {
                MessageBox.Show("File Load Error: JMdict_e.txt could not be found. Please copy the file into the same directory as the .exe-File of this Program!");
                throw;
            }

            
            //Suche Ergebnis:
            List<DictionaryEntryObject> erg = DictionaryEntryObject.SucheUebersetzung(liste2, gesWort);

            foreach (DictionaryEntryObject s in erg)
            {
                listbox1.Items.Add("Result: ");
                listbox1.Items.Add("ent_seq entry number: " + s.strEnt_seq);
                listbox1.Items.Add("Chinese letters: " + s.strKeb);
                listbox1.Items.Add("Pronounciation: " + s.strReb);
                listbox1.Items.Add("Translation: " + s.strGloss);
                listbox1.Items.Add(" ");
            }

        }
       
    }
}

End MainWindow.xaml.cs ------------------------------

MainWindow.xaml ------------------------------
<Window x:Class="UmwandlungDatensatzobjekt.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:UmwandlungDatensatzobjekt"
        mc:Ignorable="d"
        Title="MainWindow" Height="768" Width="1024">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition></RowDefinition>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions><ColumnDefinition></ColumnDefinition>
        </Grid.ColumnDefinitions>
        <Label Name="lblAcknowledgement" Grid.Row="0"></Label>
        <Label Grid.Row="1">You were looking for the following keyword:</Label>
        <Label Name="lblKey" Grid.Row="2"></Label>

        <Label Name="lblResult" Grid.Row="3">Result:</Label>
        <ListBox Name="listbox1" Grid.Row="4"></ListBox>
     
    </Grid>
</Window>


End MainWindow.xaml.cs ------------------------------